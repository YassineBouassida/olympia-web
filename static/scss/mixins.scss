@mixin media-min-width($width) {
    @media (min-width: $width) {}
}

@mixin media-max-width($width) {
    @media (max-width: $width) {}
}

@mixin media-min-height($height) {
    @media (min-height: $height) {}
}

@mixin media-max-height($height) {
    @media (max-height: $height) {}
}

//w-${var} class
$sizer: 1%;
$sizer-increment: 5;

$sizers: ();

@for $i from 1 through 20 {
    $sizers: map-merge($sizers, ($i * $sizer-increment: $sizer * $i * $sizer-increment))
}

@each $prop,
$abbrev in (width: w, height: h) {

    @each $size,
    $length in $sizers {
        .#{$abbrev}-#{$size} {
            #{$prop}: $length !important;
        }
    }
}

//t-${var} class
$type: 0.1rem;
$type-increment: 1;

$types: ();

@for $i from 1 through 30 {
    $types: map-merge($types, ($i * $type-increment: $type * $i * $type-increment))
}

@each $prop,
$abbrev in (font-size: t) {

    @each $size,
    $length in $types {
        .#{$abbrev}-#{$size} {
            #{$prop}: $length !important;
        }
    }
}



//colors modifier
@mixin color-modifiers($attribute: 'color', $prefix: '-') {

    @each $name,
    $hex in $colors {
        &#{$prefix}#{$name} {
            #{$attribute}: $hex !important;
        }
    }

    @each $name,
    $hex in $gradients {
        &#{$prefix}#{$name} {
            #{$attribute}: $hex !important;
        }
    }
}

@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {

    // For Google Chrome
    &::-webkit-scrollbar {
        width: $size;
        height: $size;
    }

    &::-webkit-scrollbar-thumb {
        background: $foreground-color;
    }

    &::-webkit-scrollbar-track {
        background: $background-color;
    }

    // For Internet Explorer
    & {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}

//padding, margin spacer vars 
$spacer: 16;
$max: 5;
$zero: 0px;
$one: unquote(($spacer * 0.25) + 'px');
$two: unquote(($spacer * 0.5) + 'px');
$three: unquote(($spacer) + 'px');
$four: unquote(($spacer * 1.5) + 'px');
$five: unquote(($spacer * 3) + 'px');

$spaces: ($zero, $one, $two, $three, $four, $five); // Adjust this to include the pixel amounts you need.
$sides: (x, y, all, top, bottom, left, right); // Leave this variable alone
$index: 0;

@each $space in $spaces {
    @each $side in $sides {
        @if $side==all {
            .pa-#{$index} {
                padding: #{$space} #{$space} !important;
            }
        }

        @else if $side==x {
            .px-#{$index} {
                padding-left: #{$space} !important;
                padding-right: #{$space} !important;
            }
        }

        @else if $side==y {
            .py-#{$index} {
                padding-top: #{$space} !important;
                padding-bottom: #{$space} !important;
            }
        }

        @else {
            .p#{str-slice($side, 0, 1)}-#{$index} {
                padding-#{$side}: #{$space} !important;
            }
        }
    }

    @each $side in $sides {
        @if $side==all {
            .ma-#{$index} {
                margin: #{$space} #{$space} !important;
            }
        }

        @else if $side==x {
            .mx-#{$index} {
                margin-left: #{$space} !important;
                margin-right: #{$space} !important;
            }
        }

        @else if $side==y {
            .my-#{$index} {
                margin-top: #{$space} !important;
                margin-bottom: #{$space} !important;
            }
        }

        @else {
            .m#{str-slice($side, 0, 1)}-#{$index} {
                margin-#{$side}: #{$space} !important;
            }
        }
    }

    $index: $index+1;
}